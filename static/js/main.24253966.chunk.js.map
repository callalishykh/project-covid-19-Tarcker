{"version":3,"sources":["components/cards/cards.module.css","api/index.js","components/cards/cards.jsx","components/charts/charts.jsx","components/countryPicker/countryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/charts/charts.module.css","components/countryPicker/countryPicker.module.css","images/covid-19.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","fill","borderColor","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setcountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","data1","this","src","covidImage","alt","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24253966.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2h8UW\",\"card\":\"cards_card__1rD5d\",\"infected\":\"cards_infected__2X-4Z\",\"recovered\":\"cards_recovered__3no8O\",\"deaths\":\"cards_deaths__APd0O\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {}\r\n};\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    const modifiedData = countries.map((country) => country.name);\r\n    return modifiedData;\r\n    //  return countries.map((country) => country.name);\r\n  } catch (error) {}\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"loading...\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          {\" \"}\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recoverd\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>{\" \"}\r\n            <Typography color=\"textSecondary\">\r\n              {\" \"}\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoverd cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          {\" \"}\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h4\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>{\" \"}\r\n            <Typography color=\"textSecondary\">\r\n              {\" \"}\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths from covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport styles from \"./charts.module.css\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nconst Charts = ({ country, data: { confirmed, deaths, recovered } }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const data = await fetchDailyData();\r\n      setDailyData(data);\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            fill: true,\r\n            borderColor: \"#3333ff\",\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            fill: true,\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}> {country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./countryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setcountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const data = await fetchCountries();\r\n      setcountries(data);\r\n    };\r\n\r\n    fetchApi();\r\n  }, [countries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"global\">Global</option>\r\n        {countries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nimport Cards from \"./components/cards/cards\";\nimport Charts from \"./components/charts/charts\";\nimport CountryPicker from \"./components/countryPicker/countryPicker\";\nimport covidImage from \"./images/covid-19.png\";\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const data1 = await fetchData();\n    this.setState({ data: data1 });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data: data, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img src={covidImage} alt=\"covid-19\" className={styles.image}></img>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__BlmGA\",\"image\":\"App_image__38BAb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__1KN-O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__1UgOH\"};","module.exports = __webpack_public_path__ + \"static/media/covid-19.5b53b2e5.png\";"],"sourceRoot":""}